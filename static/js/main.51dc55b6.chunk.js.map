{"version":3,"sources":["images/logo.jpeg","Test1.js","Test2.js","Test3.js","Test4.js","Test5.js","App.js","reportWebVitals.js","index.js"],"names":["Test1","state","plots","axios","get","then","response","data","forEach","element","end_period","Date","toLocaleTimeString","navigator","language","hour","minute","setState","src","logo","alt","width","height","ResponsiveContainer","BarChart","this","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","fill","Component","Test2","LineChart","margin","top","right","left","bottom","Line","type","stroke","Test3","Test4","all","map","endpoint","res","arr","index","i","AC_Power","console","log","style","color","Test5","value","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPAAe,MAA0B,kC,2ECcnCA,E,4MACFC,MAAQ,CACJC,MAAO,I,uDAGX,WAAqB,IAAD,OAChBC,IAAMC,IAAI,8FACLC,MAAK,SAAAC,GACF,IAAIJ,EAAQI,EAASC,KACrBL,EAAMM,SAAQ,SAAAC,GACVA,EAAQC,WAAa,IAAIC,KAAKF,EAAQC,YACtCD,EAAQC,WAAaD,EAAQC,WAAWE,mBAAmBC,UAAUC,SAAU,CAC3EC,KAAM,UACNC,OAAQ,eAGhB,EAAKC,SAAS,CAAEf,e,oBAK5B,WACI,OACI,gCACI,qBAAKgB,IAAKC,EAAMC,IAAI,OAAOC,MAAM,MAAMC,OAAO,QAC9C,+EACA,+LAEA,gFACA,cAACC,EAAA,EAAD,CAAqBF,MAAM,MAAMC,OAAQ,IAAzC,SACA,eAACE,EAAA,EAAD,CAAUH,MAAO,IAAKC,OAAQ,IAAKf,KAAMkB,KAAKxB,MAAMC,MAApD,UACI,cAACwB,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,eACf,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAKJ,QAAQ,WAAWK,KAAK,wB,GApC7BC,aA4CLnC,I,kBC5CToC,E,4MACFnC,MAAQ,CACJC,MAAO,I,uDAEX,WAAqB,IAAD,OAChBC,IAAMC,IAAI,6FACLC,MAAK,SAAAC,GACF,IAAIJ,EAAQI,EAASC,KACrBL,EAAMM,SAAQ,SAAAC,GACVA,EAAQC,WAAa,IAAIC,KAAKF,EAAQC,YACtCD,EAAQC,WAAaD,EAAQC,WAAWE,mBAAmBC,UAAUC,SAAU,CAC3EC,KAAM,UACNC,OAAO,eAGf,EAAKC,SAAS,CAAEf,e,oBAK5B,WACI,OACI,gCACA,wFACA,cAACqB,EAAA,EAAD,CAAqBF,MAAM,MAAMC,OAAQ,IAAzC,SACI,eAACe,EAAA,EAAD,CAAWhB,MAAO,IAAKC,OAAQ,IAAKf,KAAMkB,KAAKxB,MAAMC,MACjDoC,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,GADnD,UAEI,cAAChB,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,eACf,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACW,EAAA,EAAD,CAAMC,KAAK,WAAWf,QAAQ,OAAOgB,OAAO,wB,GAhC5CV,aA0CLC,IC1CTU,E,4MACF7C,MAAQ,CACJC,MAAO,I,uDAEX,WAAqB,IAAD,OAChBC,IAAMC,IAAI,kGACLC,MAAK,SAAAC,GACF,IAAIJ,EAAQI,EAASC,KACrBL,EAAMM,SAAQ,SAAAC,GACVA,EAAQC,WAAa,IAAIC,KAAKF,EAAQC,YACtCD,EAAQC,WAAaD,EAAQC,WAAWE,mBAAmBC,UAAUC,SAAU,CAC3EC,KAAM,UACNC,OAAO,eAGf,EAAKC,SAAS,CAAEf,e,oBAI5B,WACI,OACI,gCACA,sGACA,cAACqB,EAAA,EAAD,CAAqBF,MAAM,MAAMC,OAAQ,IAAzC,SACI,eAACe,EAAA,EAAD,CAAWhB,MAAO,IAAKC,OAAQ,IAAKf,KAAMkB,KAAKxB,MAAMC,MACjDoC,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,GADnD,UAEI,cAAChB,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,eACf,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACW,EAAA,EAAD,CAAMC,KAAK,WAAWf,QAAQ,WAAWgB,OAAO,wB,GA/BhDV,aAyCLW,ICzCTC,E,4MACF9C,MAAQ,CACJC,MAAO,I,uDAEX,WAAqB,IAAD,OAQhBC,IAAM6C,IAPU,CACZ,iGACA,iGACA,iGACA,mGAGgBC,KAAI,SAACC,GAAD,OAAc/C,IAAMC,IAAI8C,OAAY7C,MACxD,SAAC8C,GAGGA,EAAI3C,SAAQ,SAAC4C,EAAKC,GACdD,EAAI7C,KAAKC,SAAQ,SAACC,EAAQ6C,GACnBD,EAAM,IACLF,EAAI,GAAG5C,KAAK+C,GAAG,YAAcD,GAAS5C,EAAQ8C,gBAI1DC,QAAQC,IAAIN,EAAI,GAAG5C,MAEP4C,EAAI,GAAG5C,KACbC,SAAQ,SAAAC,GACVA,EAAQC,WAAa,IAAIC,KAAKF,EAAQC,YACtCD,EAAQC,WAAaD,EAAQC,WAAWE,mBAAmBC,UAAUC,SAAU,CAC3EC,KAAM,UACNC,OAAO,eAIf,EAAKC,SAAS,CAACf,MAAMiD,EAAI,GAAG5C,Y,oBAMxC,WACI,OACI,gCACA,8HACA,cAACgB,EAAA,EAAD,CAAqBF,MAAM,MAAMC,OAAQ,IAAzC,SACI,eAACe,EAAA,EAAD,CAAWhB,MAAO,IAAKC,OAAQ,IAAKf,KAAMkB,KAAKxB,MAAMC,MACjDoC,OAAQ,CAAEC,IAAK,EAAGC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,GADnD,UAEI,cAAChB,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,eACf,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACA,cAACW,EAAA,EAAD,CAAMC,KAAK,WAAWf,QAAQ,WAAWgB,OAAO,WAChD,cAACF,EAAA,EAAD,CAAMC,KAAK,WAAWf,QAAQ,aAAagB,OAAO,QAClD,cAACF,EAAA,EAAD,CAAMC,KAAK,WAAWf,QAAQ,aAAagB,OAAO,UAClD,cAACF,EAAA,EAAD,CAAMC,KAAK,WAAWf,QAAQ,aAAagB,OAAO,cAGtD,mBAAGa,MAAO,CAACC,MAAO,UAAlB,uEACA,mBAAGD,MAAO,CAACC,MAAO,OAAlB,yEACA,mBAAGD,MAAO,CAACC,MAAO,SAAlB,yEACA,mBAAGD,MAAO,CAACC,MAAO,QAAlB,kF,GA7DIxB,aAqELY,IChFTa,E,4MAEF3D,MAAO,CACH4D,MAAO,M,uDAGX,WAAoB,IAAD,OACf1D,IAAMC,IAAI,yFACTC,MAAK,SAAAC,GACF,IAAIuD,EAAQvD,EAASC,KACrB,EAAKU,SAAS,CAAE4C,e,oBAIxB,WACI,OACI,8BACI,mGAAsEpC,KAAKxB,MAAM4D,MAAjF,kB,GAjBI1B,aAuBLyB,IClBTE,E,4JACJ,WAEE,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GATU5B,aAgBH2B,ICZAE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB7D,MAAK,YAAkD,IAA/C8D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.51dc55b6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.139ce0e4.jpeg\";","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport logo from './images/logo.jpeg';\r\nimport {\r\n    BarChart,\r\n    Legend, Tooltip,\r\n    Bar,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid, \r\n    ResponsiveContainer\r\n} from 'recharts';\r\n\r\nclass Test1 extends Component {\r\n    state = {\r\n        plots: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('https://raw.githubusercontent.com/cindyiskandar/Demo-Repo/new_commit/half_hourly_data.json')\r\n            .then(response => {\r\n                var plots = response.data;\r\n                plots.forEach(element => {\r\n                    element.end_period = new Date(element.end_period)\r\n                    element.end_period = element.end_period.toLocaleTimeString(navigator.language, {\r\n                        hour: '2-digit',\r\n                        minute: '2-digit'\r\n                    });\r\n                });\r\n                this.setState({ plots });\r\n\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <img src={logo} alt=\"Logo\" width=\"100\" height=\"100\" />\r\n                <h1>Easter Bush Educational Solar Array Interface</h1>\r\n                <p>The array has two strings of 12 panels each, connected to one inverter.\r\n                The panels are tilted with an angle equal to 20 degrees and are oriented facing South.</p>\r\n                <p>The calculated power generated by the array is:</p>\r\n                <ResponsiveContainer width=\"95%\" height={300}>\r\n                <BarChart width={730} height={250} data={this.state.plots}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"end_period\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Bar dataKey=\"AC_Power\" fill=\"#8884d8\" />\r\n                </BarChart>\r\n                </ResponsiveContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Test1;\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport {\r\n    LineChart,\r\n    Legend, Tooltip,\r\n    Line,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid, \r\n    ResponsiveContainer\r\n} from 'recharts';\r\n  \r\n\r\nclass Test2 extends Component {\r\n    state = {\r\n        plots: []\r\n    }\r\n    componentDidMount() {\r\n        axios.get('https://raw.githubusercontent.com/cindyiskandar/Demo-Repo/new_commit/modelchain_data.json')\r\n            .then(response => {\r\n                var plots = response.data;\r\n                plots.forEach(element => {\r\n                    element.end_period = new Date(element.end_period)\r\n                    element.end_period = element.end_period.toLocaleTimeString(navigator.language, {\r\n                        hour: '2-digit',\r\n                        minute:'2-digit'\r\n                      });\r\n                });\r\n                this.setState({ plots });\r\n\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <p>The power generated by the array in the past 24 hrs is:</p>\r\n            <ResponsiveContainer width=\"95%\" height={300}>\r\n                <LineChart width={730} height={250} data={this.state.plots}\r\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"end_period\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Line type=\"monotone\" dataKey=\"p_mp\" stroke=\"#8884d8\" />\r\n                </LineChart>\r\n                </ResponsiveContainer>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Test2;\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport {\r\n    LineChart,\r\n    Legend, Tooltip,\r\n    Line,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid, \r\n    ResponsiveContainer\r\n} from 'recharts';\r\n  \r\n\r\nclass Test3 extends Component {\r\n    state = {\r\n        plots: []\r\n    }\r\n    componentDidMount() {\r\n        axios.get('https://raw.githubusercontent.com/cindyiskandar/Demo-Repo/new_commit/ac_power_output_data.json')\r\n            .then(response => {\r\n                var plots = response.data;\r\n                plots.forEach(element => {\r\n                    element.end_period = new Date(element.end_period)\r\n                    element.end_period = element.end_period.toLocaleTimeString(navigator.language, {\r\n                        hour: '2-digit',\r\n                        minute:'2-digit'\r\n                      });\r\n                });\r\n                this.setState({ plots });                \r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <p>The estimated power generated by the array in the upcoming 24 hrs is:</p>\r\n            <ResponsiveContainer width=\"95%\" height={300}>\r\n                <LineChart width={730} height={250} data={this.state.plots}\r\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"end_period\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Line type=\"monotone\" dataKey=\"AC_Power\" stroke=\"#8884d8\" />\r\n                </LineChart>\r\n                </ResponsiveContainer>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Test3;\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport {\r\n    LineChart,\r\n    Legend, Tooltip,\r\n    Line,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid, \r\n    ResponsiveContainer\r\n} from 'recharts';\r\n\r\n\r\nclass Test4 extends Component {\r\n    state = {\r\n        plots: []\r\n    }\r\n    componentDidMount() {\r\n        let endpoints = [\r\n            'https://raw.githubusercontent.com/cindyiskandar/Demo-Repo/new_commit/ac_power_output_data.json',\r\n            'https://raw.githubusercontent.com/cindyiskandar/Demo-Repo/new_commit/ac_power_winter_data.json',\r\n            'https://raw.githubusercontent.com/cindyiskandar/Demo-Repo/new_commit/ac_power_summer_data.json',\r\n            'https://raw.githubusercontent.com/cindyiskandar/Demo-Repo/new_commit/ac_power_tracker_data.json',\r\n        ];\r\n\r\n        axios.all(endpoints.map((endpoint) => axios.get(endpoint))).then(\r\n            (res) => {\r\n                // console.log(res[0].data)\r\n                // console.log(res[1].data)\r\n                res.forEach((arr, index) => {\r\n                    arr.data.forEach((element,i) => {\r\n                        if(index>0){\r\n                            res[0].data[i]['AC_Power_' + index] = element.AC_Power\r\n                        }\r\n                    });\r\n                });\r\n                console.log(res[0].data)\r\n                \r\n                var plots = res[0].data;\r\n                plots.forEach(element => {\r\n                    element.end_period = new Date(element.end_period)\r\n                    element.end_period = element.end_period.toLocaleTimeString(navigator.language, {\r\n                        hour: '2-digit',\r\n                        minute:'2-digit'\r\n                      });\r\n                });\r\n            //    const plots = res[0].data.concat(res[1].data)\r\n                this.setState({plots:res[0].data})\r\n            },\r\n        );\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n            <p>The estimated power generated by the array in the upcoming 24 hrs for different scenarios is:</p>\r\n            <ResponsiveContainer width=\"95%\" height={300}>\r\n                <LineChart width={730} height={250} data={this.state.plots}\r\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"end_period\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Line type=\"monotone\" dataKey=\"AC_Power\" stroke=\"yellow\" />\r\n                    <Line type=\"monotone\" dataKey=\"AC_Power_1\" stroke=\"red\" />\r\n                    <Line type=\"monotone\" dataKey=\"AC_Power_2\" stroke=\"green\" />\r\n                    <Line type=\"monotone\" dataKey=\"AC_Power_3\" stroke=\"blue\" />\r\n                </LineChart>\r\n                </ResponsiveContainer>\r\n                <p style={{color: \"yellow\"}}>AC_Power represents “ac_power_output_data.json”</p>\r\n                <p style={{color: \"red\"}}>AC_Power_1 represents “ac_power_winter_data.json”</p>\r\n                <p style={{color: \"green\"}}>AC_Power_2 represents “ac_power_summer_data.json”</p>\r\n                <p style={{color: \"blue\"}}>AC_Power_3 represents “ac_power_tracker_data.json” </p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Test4;\r\n             ","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\nimport './App.css';\r\nclass Test5 extends Component {\r\n\r\n    state ={\r\n        value: null\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios.get('https://raw.githubusercontent.com/cindyiskandar/Demo-Repo/new_commit/carbon_data.json')\r\n        .then(response =>  {\r\n            var value = response.data;\r\n            this.setState({ value });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>The estimated carbon emissions saved by the array for the day are {this.state.value} gCO2.</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Test5;\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Test1 from './Test1';\nimport Test2 from './Test2';\nimport Test3 from './Test3';\nimport Test4 from './Test4';\nimport Test5 from './Test5';\n\nclass App extends Component {\n  render() {\n    \n    return (\n      <div className=\"App\">    \n        <Test1 />\n        <Test2 />\n        <Test3 />\n        <Test4 />\n        <Test5 />    \n      </div>\n      );\n    }\n    \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n   <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}